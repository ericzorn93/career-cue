// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: accounts/accountsapi/v1/api.proto

package accountsapiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "libs/backend/proto-gen/go/accounts/accountsapi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RegistrationServiceName is the fully-qualified name of the RegistrationService service.
	RegistrationServiceName = "accounts.accountsapi.v1.RegistrationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RegistrationServiceCreateAccountProcedure is the fully-qualified name of the
	// RegistrationService's CreateAccount RPC.
	RegistrationServiceCreateAccountProcedure = "/accounts.accountsapi.v1.RegistrationService/CreateAccount"
	// RegistrationServiceGetAccountProcedure is the fully-qualified name of the RegistrationService's
	// GetAccount RPC.
	RegistrationServiceGetAccountProcedure = "/accounts.accountsapi.v1.RegistrationService/GetAccount"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	registrationServiceServiceDescriptor             = v1.File_accounts_accountsapi_v1_api_proto.Services().ByName("RegistrationService")
	registrationServiceCreateAccountMethodDescriptor = registrationServiceServiceDescriptor.Methods().ByName("CreateAccount")
	registrationServiceGetAccountMethodDescriptor    = registrationServiceServiceDescriptor.Methods().ByName("GetAccount")
)

// RegistrationServiceClient is a client for the accounts.accountsapi.v1.RegistrationService
// service.
type RegistrationServiceClient interface {
	// CreateAccount creates a new account
	CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAcountResponse], error)
	// GetAccount retrieves an account by its common id
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error)
}

// NewRegistrationServiceClient constructs a client for the
// accounts.accountsapi.v1.RegistrationService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRegistrationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RegistrationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &registrationServiceClient{
		createAccount: connect.NewClient[v1.CreateAccountRequest, v1.CreateAcountResponse](
			httpClient,
			baseURL+RegistrationServiceCreateAccountProcedure,
			connect.WithSchema(registrationServiceCreateAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAccount: connect.NewClient[v1.GetAccountRequest, v1.GetAccountResponse](
			httpClient,
			baseURL+RegistrationServiceGetAccountProcedure,
			connect.WithSchema(registrationServiceGetAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// registrationServiceClient implements RegistrationServiceClient.
type registrationServiceClient struct {
	createAccount *connect.Client[v1.CreateAccountRequest, v1.CreateAcountResponse]
	getAccount    *connect.Client[v1.GetAccountRequest, v1.GetAccountResponse]
}

// CreateAccount calls accounts.accountsapi.v1.RegistrationService.CreateAccount.
func (c *registrationServiceClient) CreateAccount(ctx context.Context, req *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAcountResponse], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// GetAccount calls accounts.accountsapi.v1.RegistrationService.GetAccount.
func (c *registrationServiceClient) GetAccount(ctx context.Context, req *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// RegistrationServiceHandler is an implementation of the
// accounts.accountsapi.v1.RegistrationService service.
type RegistrationServiceHandler interface {
	// CreateAccount creates a new account
	CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAcountResponse], error)
	// GetAccount retrieves an account by its common id
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error)
}

// NewRegistrationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRegistrationServiceHandler(svc RegistrationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	registrationServiceCreateAccountHandler := connect.NewUnaryHandler(
		RegistrationServiceCreateAccountProcedure,
		svc.CreateAccount,
		connect.WithSchema(registrationServiceCreateAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	registrationServiceGetAccountHandler := connect.NewUnaryHandler(
		RegistrationServiceGetAccountProcedure,
		svc.GetAccount,
		connect.WithSchema(registrationServiceGetAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/accounts.accountsapi.v1.RegistrationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RegistrationServiceCreateAccountProcedure:
			registrationServiceCreateAccountHandler.ServeHTTP(w, r)
		case RegistrationServiceGetAccountProcedure:
			registrationServiceGetAccountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRegistrationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRegistrationServiceHandler struct{}

func (UnimplementedRegistrationServiceHandler) CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAcountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounts.accountsapi.v1.RegistrationService.CreateAccount is not implemented"))
}

func (UnimplementedRegistrationServiceHandler) GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounts.accountsapi.v1.RegistrationService.GetAccount is not implemented"))
}
