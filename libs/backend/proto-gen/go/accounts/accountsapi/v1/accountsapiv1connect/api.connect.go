// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: accounts/accountsapi/v1/api.proto

package accountsapiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "libs/backend/proto-gen/go/accounts/accountsapi/v1"
	v11 "libs/backend/proto-gen/go/common/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountsAPIName is the fully-qualified name of the AccountsAPI service.
	AccountsAPIName = "accounts.accountsapi.v1.AccountsAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountsAPICreateAccountProcedure is the fully-qualified name of the AccountsAPI's CreateAccount
	// RPC.
	AccountsAPICreateAccountProcedure = "/accounts.accountsapi.v1.AccountsAPI/CreateAccount"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	accountsAPIServiceDescriptor             = v1.File_accounts_accountsapi_v1_api_proto.Services().ByName("AccountsAPI")
	accountsAPICreateAccountMethodDescriptor = accountsAPIServiceDescriptor.Methods().ByName("CreateAccount")
)

// AccountsAPIClient is a client for the accounts.accountsapi.v1.AccountsAPI service.
type AccountsAPIClient interface {
	CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v11.Empty], error)
}

// NewAccountsAPIClient constructs a client for the accounts.accountsapi.v1.AccountsAPI service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountsAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountsAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accountsAPIClient{
		createAccount: connect.NewClient[v1.CreateAccountRequest, v11.Empty](
			httpClient,
			baseURL+AccountsAPICreateAccountProcedure,
			connect.WithSchema(accountsAPICreateAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountsAPIClient implements AccountsAPIClient.
type accountsAPIClient struct {
	createAccount *connect.Client[v1.CreateAccountRequest, v11.Empty]
}

// CreateAccount calls accounts.accountsapi.v1.AccountsAPI.CreateAccount.
func (c *accountsAPIClient) CreateAccount(ctx context.Context, req *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v11.Empty], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// AccountsAPIHandler is an implementation of the accounts.accountsapi.v1.AccountsAPI service.
type AccountsAPIHandler interface {
	CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v11.Empty], error)
}

// NewAccountsAPIHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountsAPIHandler(svc AccountsAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountsAPICreateAccountHandler := connect.NewUnaryHandler(
		AccountsAPICreateAccountProcedure,
		svc.CreateAccount,
		connect.WithSchema(accountsAPICreateAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/accounts.accountsapi.v1.AccountsAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountsAPICreateAccountProcedure:
			accountsAPICreateAccountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountsAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountsAPIHandler struct{}

func (UnimplementedAccountsAPIHandler) CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v11.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("accounts.accountsapi.v1.AccountsAPI.CreateAccount is not implemented"))
}
