// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: webhooks/inboundwebhooksapi/v1/api.proto

package inboundwebhooksapiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "libs/backend/proto-gen/go/common/v1"
	v1 "libs/backend/proto-gen/go/webhooks/inboundwebhooksapi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InboundWebhooksAuthServiceName is the fully-qualified name of the InboundWebhooksAuthService
	// service.
	InboundWebhooksAuthServiceName = "webhooks.inboundwebhooksapi.v1.InboundWebhooksAuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InboundWebhooksAuthServiceUserRegisteredProcedure is the fully-qualified name of the
	// InboundWebhooksAuthService's UserRegistered RPC.
	InboundWebhooksAuthServiceUserRegisteredProcedure = "/webhooks.inboundwebhooksapi.v1.InboundWebhooksAuthService/UserRegistered"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	inboundWebhooksAuthServiceServiceDescriptor              = v1.File_webhooks_inboundwebhooksapi_v1_api_proto.Services().ByName("InboundWebhooksAuthService")
	inboundWebhooksAuthServiceUserRegisteredMethodDescriptor = inboundWebhooksAuthServiceServiceDescriptor.Methods().ByName("UserRegistered")
)

// InboundWebhooksAuthServiceClient is a client for the
// webhooks.inboundwebhooksapi.v1.InboundWebhooksAuthService service.
type InboundWebhooksAuthServiceClient interface {
	// Auth0
	UserRegistered(context.Context, *connect.Request[v1.UserRegisteredRequest]) (*connect.Response[v11.Empty], error)
}

// NewInboundWebhooksAuthServiceClient constructs a client for the
// webhooks.inboundwebhooksapi.v1.InboundWebhooksAuthService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInboundWebhooksAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InboundWebhooksAuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &inboundWebhooksAuthServiceClient{
		userRegistered: connect.NewClient[v1.UserRegisteredRequest, v11.Empty](
			httpClient,
			baseURL+InboundWebhooksAuthServiceUserRegisteredProcedure,
			connect.WithSchema(inboundWebhooksAuthServiceUserRegisteredMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// inboundWebhooksAuthServiceClient implements InboundWebhooksAuthServiceClient.
type inboundWebhooksAuthServiceClient struct {
	userRegistered *connect.Client[v1.UserRegisteredRequest, v11.Empty]
}

// UserRegistered calls webhooks.inboundwebhooksapi.v1.InboundWebhooksAuthService.UserRegistered.
func (c *inboundWebhooksAuthServiceClient) UserRegistered(ctx context.Context, req *connect.Request[v1.UserRegisteredRequest]) (*connect.Response[v11.Empty], error) {
	return c.userRegistered.CallUnary(ctx, req)
}

// InboundWebhooksAuthServiceHandler is an implementation of the
// webhooks.inboundwebhooksapi.v1.InboundWebhooksAuthService service.
type InboundWebhooksAuthServiceHandler interface {
	// Auth0
	UserRegistered(context.Context, *connect.Request[v1.UserRegisteredRequest]) (*connect.Response[v11.Empty], error)
}

// NewInboundWebhooksAuthServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInboundWebhooksAuthServiceHandler(svc InboundWebhooksAuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	inboundWebhooksAuthServiceUserRegisteredHandler := connect.NewUnaryHandler(
		InboundWebhooksAuthServiceUserRegisteredProcedure,
		svc.UserRegistered,
		connect.WithSchema(inboundWebhooksAuthServiceUserRegisteredMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/webhooks.inboundwebhooksapi.v1.InboundWebhooksAuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InboundWebhooksAuthServiceUserRegisteredProcedure:
			inboundWebhooksAuthServiceUserRegisteredHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInboundWebhooksAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInboundWebhooksAuthServiceHandler struct{}

func (UnimplementedInboundWebhooksAuthServiceHandler) UserRegistered(context.Context, *connect.Request[v1.UserRegisteredRequest]) (*connect.Response[v11.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("webhooks.inboundwebhooksapi.v1.InboundWebhooksAuthService.UserRegistered is not implemented"))
}
