package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"apps/services/accounts-graphql/internal/graph/models"
	"context"
	"fmt"
	"libs/backend/auth"
	accountsapiv1 "libs/backend/proto-gen/go/accounts/accountsapi/v1"
	"log/slog"
	"time"

	"connectrpc.com/connect"
	"github.com/google/uuid"
)

// DeleteAccount is the resolver for the deleteAccount field.
func (r *mutationResolver) DeleteAccount(ctx context.Context, commonID uuid.UUID) (*time.Time, error) {
	r.Logger.Info("Deleting account", slog.String("commonID", commonID.String()))

	// Call Accounts API
	const hardDelete = false

	accessToken := auth.GetAuthTokenFromContext(ctx)
	req := connect.NewRequest(&accountsapiv1.DeleteAccountRequest{
		CommonId:   commonID.String(),
		HardDelete: hardDelete,
	})
	req.Header().Add(auth.AuthorizationHeaderKey, accessToken)

	resp, err := r.AccountsAPIClient.DeleteAccount(ctx, req)

	if err != nil {
		return nil, fmt.Errorf("could not delete account: %w", err)
	}

	deletedAtUTC := resp.Msg.DeletedAt.AsTime().UTC()
	return &deletedAtUTC, nil
}

// Account is the resolver for the account field.
func (r *queryResolver) Account(ctx context.Context, input models.RetrieveAccountInput) (*models.Account, error) {
	loggerValues := make([]any, 0)

	// Call the Accounts API
	commonID := input.CommonID
	emailAddress := input.EmailAddress

	// Construct proper request
	var req *connect.Request[accountsapiv1.GetAccountRequest]
	switch {
	case commonID != nil:
		commonIDStr := commonID.String()
		req = connect.NewRequest(&accountsapiv1.GetAccountRequest{
			CommonId: &commonIDStr,
		})
		loggerValues = append(loggerValues, slog.String("commonID", commonIDStr))
	case emailAddress != nil:
		loggerValues = append(loggerValues, slog.String("emailAddress", *emailAddress))
		req = connect.NewRequest(&accountsapiv1.GetAccountRequest{
			EmailAddress: emailAddress,
		})
	}

	r.Logger.Info("Fetching account", loggerValues...)

	// Call the accounts API
	authHeader := auth.GetAuthTokenFromContext(ctx)
	req.Header().Add(auth.AuthorizationHeaderKey, authHeader)
	resp, err := r.AccountsAPIClient.GetAccount(ctx, req)

	// Check if there was an error or if the account is nil
	if err != nil || resp.Msg.Account == nil {
		return nil, fmt.Errorf("error getting account by commonID: %w", err)
	}

	// Parse values (commonID,)
	parsedCommonID, err := uuid.Parse(resp.Msg.Account.CommonId)
	if err != nil {
		return nil, fmt.Errorf("commonID cannot be parsed from account: %w", err)
	}

	return &models.Account{
		ID:           parsedCommonID,
		EmailAddress: resp.Msg.Account.EmailAddress,
		CreatedAt:    resp.Msg.Account.CreatedAt.AsTime(),
		UpdatedAt:    resp.Msg.Account.UpdatedAt.AsTime(),
	}, nil
}
