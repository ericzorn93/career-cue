package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"apps/services/accounts-graphql/internal/graph/generated"
	"apps/services/accounts-graphql/internal/graph/models"
	"context"
	"fmt"
	"libs/backend/auth"
	accountsapiv1 "libs/backend/proto-gen/go/accounts/accountsapi/v1"

	"connectrpc.com/connect"
	"github.com/google/uuid"
)

// Empty is the resolver for the empty field.
func (r *mutationResolver) Empty(ctx context.Context) (bool, error) {
	return true, nil
}

// Empty is the resolver for the empty field.
func (r *queryResolver) Empty(ctx context.Context) (bool, error) {
	return true, nil
}

// Viewer is the resolver for the viewer field.
func (r *queryResolver) Viewer(ctx context.Context, commonID uuid.UUID) (*models.Viewer, error) {
	// Call the Accounts API
	commonIDStr := commonID.String()

	req := connect.NewRequest(&accountsapiv1.GetAccountRequest{
		CommonId: &commonIDStr,
	})
	authHeader := auth.GetAuthTokenFromContext(ctx)
	req.Header().Add("Authorization", authHeader)
	resp, err := r.AccountsAPIClient.GetAccount(ctx, req)

	// Check if there was an error or if the account is nil
	if err != nil || resp.Msg.Account == nil {
		return nil, fmt.Errorf("error getting account by commonID: %w", err)
	}

	// Parse values (commonID,)
	parsedCommonID, err := uuid.Parse(resp.Msg.Account.CommonId)
	if err != nil {
		return nil, fmt.Errorf("commonID cannot be parsed from account: %w", err)
	}

	return &models.Viewer{
		Empty:        true,
		ID:           parsedCommonID,
		EmailAddress: resp.Msg.Account.EmailAddress,
		CreatedAt:    resp.Msg.Account.CreatedAt.AsTime(),
		UpdatedAt:    resp.Msg.Account.UpdatedAt.AsTime(),
	}, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
